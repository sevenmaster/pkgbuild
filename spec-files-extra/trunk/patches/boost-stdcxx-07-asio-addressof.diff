Undo this change introduced in Boost 1.42:
http://www.boost.org/doc/libs/1_46_1/doc/html/boost_asio/history.html
https://svn.boost.org/trac/boost/ticket/2977
addressof is broken on Solaris.

--- boost/asio/detail/impl/task_io_service.hpp.orig	Fri Dec 17 18:11:49 2010
+++ boost/asio/detail/impl/task_io_service.hpp	Tue Mar 15 21:01:52 2011
@@ -44,7 +44,7 @@
 {
   // Allocate and construct an operation to wrap the handler.
   typedef completion_handler<Handler> op;
-  typename op::ptr p = { boost::addressof(handler),
+  typename op::ptr p = { &(handler),
     boost_asio_handler_alloc_helpers::allocate(
       sizeof(op), handler), 0 };
   p.p = new (p.v) op(handler);
--- boost/asio/detail/completion_handler.hpp.orig	Fri Dec 17 18:11:44 2010
+++ boost/asio/detail/completion_handler.hpp	Tue Mar 15 21:07:52 2011
@@ -44,7 +44,7 @@
   {
     // Take ownership of the handler object.
     completion_handler* h(static_cast<completion_handler*>(base));
-    ptr p = { boost::addressof(h->handler_), h, h };
+    ptr p = { &(h->handler_), h, h };
 
     // Make a copy of the handler so that the memory can be deallocated before
     // the upcall is made. Even if we're not about to make an upcall, a
@@ -53,7 +53,7 @@
     // to ensure that any owning sub-object remains valid until after we have
     // deallocated the memory here.
     Handler handler(h->handler_);
-    p.h = boost::addressof(handler);
+    p.h = &(handler);
     p.reset();
 
     // Make the upcall if required.
--- boost/asio/detail/handler_alloc_helpers.hpp.orig	Fri Dec 17 18:11:52 2010
+++ boost/asio/detail/handler_alloc_helpers.hpp	Tue Mar 15 21:26:02 2011
@@ -17,7 +17,6 @@
 
 #include <boost/asio/detail/config.hpp>
 #include <boost/detail/workaround.hpp>
-#include <boost/utility/addressof.hpp>
 #include <boost/asio/detail/noncopyable.hpp>
 #include <boost/asio/handler_alloc_hook.hpp>
 
@@ -36,7 +35,7 @@
   return ::operator new(s);
 #else
   using namespace boost::asio;
-  return asio_handler_allocate(s, boost::addressof(h));
+  return asio_handler_allocate(s, &(h));
 #endif
 }
 
@@ -48,7 +47,7 @@
   ::operator delete(p);
 #else
   using namespace boost::asio;
-  asio_handler_deallocate(p, s, boost::addressof(h));
+  asio_handler_deallocate(p, s, &(h));
 #endif
 }
 
--- boost/asio/detail/handler_invoke_helpers.hpp.orig	Fri Dec 17 18:11:46 2010
+++ boost/asio/detail/handler_invoke_helpers.hpp	Tue Mar 15 21:25:07 2011
@@ -17,7 +17,6 @@
 
 #include <boost/asio/detail/config.hpp>
 #include <boost/detail/workaround.hpp>
-#include <boost/utility/addressof.hpp>
 #include <boost/asio/handler_invoke_hook.hpp>
 
 #include <boost/asio/detail/push_options.hpp>
@@ -36,7 +35,7 @@
   tmp();
 #else
   using namespace boost::asio;
-  asio_handler_invoke(function, boost::addressof(context));
+  asio_handler_invoke(function, &(context));
 #endif
 }
 
