--- libfm-0.1.12/src/base/fm-file-info.h-orig	2010-09-15 21:47:24.710222215 -0700
+++ libfm-0.1.12/src/base/fm-file-info.h	2010-09-15 21:47:38.430077618 -0700
@@ -58,7 +58,7 @@ struct _FmFileInfo
     union {
         const char* fs_id;
         dev_t dev;
-    };
+    } data;
     uid_t uid;
     gid_t gid;
     goffset size;
--- libfm-0.1.14/src/base/fm-file-info.c-orig	2011-06-08 11:15:56.643260521 -0500
+++ libfm-0.1.14/src/base/fm-file-info.c	2011-06-08 11:17:35.702306179 -0500
@@ -167,12 +167,12 @@ void fm_file_info_set_from_gfileinfo(FmF
 
     if(fm_path_is_native(fi->path))
     {
-        fi->dev = g_file_info_get_attribute_uint32(inf, G_FILE_ATTRIBUTE_UNIX_DEVICE);
+        fi->data.dev = g_file_info_get_attribute_uint32(inf, G_FILE_ATTRIBUTE_UNIX_DEVICE);
     }
     else
     {
         tmp = g_file_info_get_attribute_string(inf, G_FILE_ATTRIBUTE_ID_FILESYSTEM);
-        fi->fs_id = g_intern_string(tmp);
+        fi->data.fs_id = g_intern_string(tmp);
     }
 
     fi->mtime = g_file_info_get_attribute_uint64(inf, G_FILE_ATTRIBUTE_TIME_MODIFIED);
@@ -304,9 +304,9 @@ void fm_file_info_copy(FmFileInfo* fi, F
 
     fi->mode = src->mode;
     if(fm_path_is_native(fi->path))
-        fi->dev = src->dev;
+        fi->data.dev = src->data.dev;
     else
-        fi->fs_id = src->fs_id;
+        fi->data.fs_id = src->data.fs_id;
     fi->uid = src->uid;
     fi->gid = src->gid;
     fi->size = src->size;
@@ -557,12 +557,12 @@ gboolean fm_file_info_list_is_same_fs(Fm
                 return FALSE;
             if( is_native )
             {
-                if( fi->dev != fi2->dev )
+                if( fi->data.dev != fi2->data.dev )
                     return FALSE;
             }
             else
             {
-                if( fi->fs_id != fi2->fs_id )
+                if( fi->data.fs_id != fi2->data.fs_id )
                     return FALSE;
             }
         }
--- libfm-0.1.12/src/job/fm-file-ops-job.c-orig	2010-09-15 21:49:23.682810313 -0700
+++ libfm-0.1.12/src/job/fm-file-ops-job.c	2010-09-15 21:50:07.938165945 -0700
@@ -188,7 +188,7 @@ void fm_file_ops_job_set_chown(FmFileOps
 
 void fm_file_ops_job_set_recursive(FmFileOpsJob* job, gboolean recursive)
 {
-    job->recursive = recursive;
+    job->data.recursive = recursive;
 }
 
 static void emit_cur_file(FmFileOpsJob* job, const char* cur_file)
--- libfm-0.1.12/src/job/fm-file-ops-job.h-orig	2010-09-15 21:49:50.967458307 -0700
+++ libfm-0.1.12/src/job/fm-file-ops-job.h	2010-09-15 21:49:58.175575048 -0700
@@ -93,7 +93,7 @@ struct _FmFileOpsJob
     {
         gboolean recursive; /* used by chmod/chown only */
         gboolean skip_dir_content; /* used by _fm_file_ops_job_copy_file */
-    };
+    } data;
 
     /* for chmod and chown */
     guint32 uid;
--- libfm-0.1.12/src/job/fm-file-info-job.c-orig	2010-09-15 21:50:33.649060826 -0700
+++ libfm-0.1.12/src/job/fm-file-info-job.c	2010-09-15 21:50:46.238096986 -0700
@@ -215,7 +215,7 @@ _retry:
         fi->mtime = st.st_mtime;
         fi->atime = st.st_atime;
         fi->size = st.st_size;
-        fi->dev = st.st_dev;
+        fi->data.dev = st.st_dev;
         fi->uid = st.st_uid;
         fi->gid = st.st_gid;
 
--- libfm-0.1.12/src/job/fm-file-ops-job-change-attr.c-orig	2010-09-15 21:51:57.775757519 -0700
+++ libfm-0.1.12/src/job/fm-file-ops-job-change-attr.c	2010-09-15 21:52:08.136660268 -0700
@@ -143,7 +143,7 @@ _retry_chmod:
     if(changed && job->src_folder_mon)
         g_file_monitor_emit_event(job->src_folder_mon, gf, NULL, G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED);
 
-    if( !fm_job_is_cancelled(FM_JOB(job)) && job->recursive && type == G_FILE_TYPE_DIRECTORY)
+    if( !fm_job_is_cancelled(FM_JOB(job)) && job->data.recursive && type == G_FILE_TYPE_DIRECTORY)
     {
         GFileMonitor* old_mon = job->src_folder_mon;
 		GFileEnumerator* enu;
@@ -208,7 +208,7 @@ gboolean _fm_file_ops_job_change_attr_ru
 {
 	GList* l;
 	/* prepare the job, count total work needed with FmDeepCountJob */
-    if(job->recursive)
+    if(job->data.recursive)
     {
         FmDeepCountJob* dc = fm_deep_count_job_new(job->srcs, FM_DC_JOB_DEFAULT);
         fm_job_run_sync(FM_JOB(dc));
--- libfm-0.1.14/src/job/fm-file-ops-job-xfer.c-orig	2011-06-08 11:18:03.703610520 -0500
+++ libfm-0.1.14/src/job/fm-file-ops-job-xfer.c	2011-06-08 11:18:59.888134926 -0500
@@ -164,7 +164,7 @@ _retry_query_src_info:
                         /* when a dir is skipped, we need to know its total size to calculate correct progress */
                         job->finished += size;
                         fm_file_ops_job_emit_percent(job);
-                        job->skip_dir_content = TRUE;
+                        job->data.skip_dir_content = TRUE;
                         ret = FALSE;
                         break;
                     case FM_FILE_OP_OVERWRITE:
@@ -234,7 +234,7 @@ _retry_query_src_info:
                         {
                             ++n_children;
                             /* don't overwrite dir content, only calculate progress. */
-                            if(G_UNLIKELY(job->skip_dir_content))
+                            if(G_UNLIKELY(job->data.skip_dir_content))
                             {
                                 /* FIXME: this is incorrect as we don't do the calculation recursively. */
                                 job->finished += g_file_info_get_size(inf);
@@ -297,7 +297,7 @@ _retry_query_src_info:
                         goto _retry_enum_children;
                 }
             }
-            job->skip_dir_content = FALSE;
+            job->data.skip_dir_content = FALSE;
         }
         break;
 
--- libfm-0.1.14/src/gtk/fm-dnd-dest.c-orig	2011-06-08 11:19:59.058073087 -0500
+++ libfm-0.1.14/src/gtk/fm-dnd-dest.c	2011-06-08 11:20:37.529442875 -0500
@@ -227,9 +227,9 @@ gboolean cache_src_file_infos(FmDndDest*
             {
                 FmFileInfo* fi = (FmFileInfo*)fm_list_peek_head(dd->src_files);
                 if(fm_path_is_native(fi->path))
-                    dd->src_dev = fi->dev;
+                    dd->src_dev = fi->data.dev;
                 else
-                    dd->src_fs_id = fi->fs_id;
+                    dd->src_fs_id = fi->data.fs_id;
             }
         }
     }
@@ -312,9 +312,9 @@ gboolean fm_dnd_dest_drag_data_received(
                 FmFileInfo* fi = FM_FILE_INFO(fm_list_peek_head(files));
                 /* get the device of the first dragged source file */
                 if(fm_path_is_native(fi->path))
-                    dd->src_dev = fi->dev;
+                    dd->src_dev = fi->data.dev;
                 else
-                    dd->src_fs_id = fi->fs_id;
+                    dd->src_fs_id = fi->data.fs_id;
             }
         }
     }
@@ -524,9 +524,9 @@ GdkDragAction fm_dnd_dest_get_default_ac
             {
                 /* compare the device/filesystem id against that of destination file */
                 if(fm_path_is_native(dest_path))
-                    same_fs = dd->src_dev && (dd->src_dev == dest->dev);
+                    same_fs = dd->src_dev && (dd->src_dev == dest->data.dev);
                 else /* FIXME: can we use direct comparison here? */
-                    same_fs = dd->src_fs_id && (0 == g_strcmp0(dd->src_fs_id, dest->fs_id));
+                    same_fs = dd->src_fs_id && (0 == g_strcmp0(dd->src_fs_id, dest->data.fs_id));
                 action = same_fs ? GDK_ACTION_MOVE : GDK_ACTION_COPY;
             }
             else /* we don't know on which device the dragged source files are. */
