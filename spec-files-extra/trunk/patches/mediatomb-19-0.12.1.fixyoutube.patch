diff -rup ../BUILD/mediatomb-0.12.1/src/cds_resource_manager.cc mediatomb-0.12.1/src/cds_resource_manager.cc
--- ../BUILD/mediatomb-0.12.1/src/cds_resource_manager.cc	2011-08-09 00:34:40.741499912 +0900
+++ mediatomb-0.12.1/src/cds_resource_manager.cc	2011-08-06 17:01:48.000000000 +0900
@@ -261,10 +261,13 @@ void CdsResourceManager::addResources(Re
                                      String::from(chan);
                 }
             }
-
+//targetMimeType = targetMimeType + ";" + D_OP + "=01;" + D_CONVERSION_INDICATOR + "=" D_NO_CONVERSION;
+targetMimeType = targetMimeType + ";" + D_OP + "=10;" + D_CONVERSION_INDICATOR + "=" D_CONVERSION;// + ";DLNA.ORG_FLAGS=81100000000000000000000000000000";
             t_res->addAttribute(MetadataHandler::getResAttrName(R_PROTOCOLINFO),
                     renderProtocolInfo(targetMimeType));
 
+            log_debug("// addResources targetMimeType::%s\n",targetMimeType.c_str() );
+
             if (tp->isThumbnail())
                 t_res->addOption(_(RESOURCE_CONTENT_TYPE), _(EXIF_THUMBNAIL));
 
@@ -289,6 +292,7 @@ void CdsResourceManager::addResources(Re
 #endif // EXTERNAL_TRANSCODING
 
     int resCount = item->getResourceCount();
+            log_debug("// addResources resCount::%d\n",resCount );
     for (int i = 0; i < resCount; i++)
     {
         /// \todo what if the resource has a different mimetype than the item??
mediatomb-0.12.1/srcだけに発見: cds_resource_manager.cc.orig
../BUILD/mediatomb-0.12.1/srcだけに発見: tools.cc.orig
mediatomb-0.12.1/srcだけに発見: youtube_video_url.BAK
diff -rup ../BUILD/mediatomb-0.12.1/src/youtube_video_url.cc mediatomb-0.12.1/src/youtube_video_url.cc
--- ../BUILD/mediatomb-0.12.1/src/youtube_video_url.cc	2010-04-04 05:23:31.000000000 +0900
+++ mediatomb-0.12.1/src/youtube_video_url.cc	2011-08-09 00:24:31.708378898 +0900
@@ -48,9 +48,13 @@ using namespace zmm;
 #define YOUTUBE_URL_LOCATION_REGEXP "\nLocation: (http://[^\n]+)\n"
 #define YOUTUBE_URL_WATCH           "http://www.youtube.com/watch?v="
-#define YOUTUBE_URL_GET             "http://www.youtube.com/get_video?" 
 #define YOUTUBE_URL_PARAM_VIDEO_ID  "video_id"
-#define YOUTUBE_URL_PARAM_T_REGEXP  ".*\"t\": \"([^\"]+)\""
-#define YOUTUBE_URL_PARAM_T         "t"
+
+#define YOUTUBE_URL_EMBED_TAG           "<embed type=\"application/x-shockwave-flash\" +([^>]*)>"
+#define YOUTUBE_URL_PARAM_FMT_MAP       ";url_encoded_fmt_stream_map=([^&].*video/x-flv&itag=5)"
+#define YOUTUBE_URL_PARAM_FMT_SEPARATE  "([^&].*)&fallback_host.*itag=([0-9]+)"
+
+// url_encoded_fmt_stream_map
+#define YOUTUBE_URL_PARAM_FMT         "fmt_url_map"
 #define YOUTUBE_IS_HD_AVAILABLE_REGEXP  "IS_HD_AVAILABLE[^:]*: *([^,]*)"
 YouTubeVideoURL::YouTubeVideoURL()
 {
@@ -58,13 +62,13 @@ YouTubeVideoURL::YouTubeVideoURL()
     if (!curl_handle)
         throw _Exception(_("failed to initialize curl!\n"));
 
-    reVideoURLParams = Ref<RExp>(new RExp());
-    reVideoURLParams->compile(_(YOUTUBE_URL_PARAMS_REGEXP));
-    redirectLocation = Ref<RExp>(new RExp());
-    redirectLocation->compile(_(YOUTUBE_URL_LOCATION_REGEXP));
-    param_t = Ref<RExp>(new RExp());
-    param_t->compile(_(YOUTUBE_URL_PARAM_T_REGEXP));
-
+    EMBED = Ref<RExp>(new RExp());
+    EMBED->compile(_(YOUTUBE_URL_EMBED_TAG));
+    FMT = Ref<RExp>(new RExp());
+    FMT->compile(_(YOUTUBE_URL_PARAM_FMT_MAP));
+    FMTURL = Ref<RExp>(new RExp());
+    FMTURL->compile(_(YOUTUBE_URL_PARAM_FMT_SEPARATE));
+    
     HD = Ref<RExp>(new RExp());
     HD->compile(_(YOUTUBE_IS_HD_AVAILABLE_REGEXP));
 
@@ -82,8 +86,11 @@ YouTubeVideoURL::~YouTubeVideoURL()
 
 String YouTubeVideoURL::getVideoURL(String video_id, bool mp4, bool hd)
 {
+    Ref<StringBuffer> buffer;
+    Ref<Matcher> matcher;
+
     long retcode; 
-    String flv_location;
+    String urls;
     String watch;
 #ifdef TOMBDEBUG
     bool verbose = true;
@@ -91,27 +98,6 @@ String YouTubeVideoURL::getVideoURL(Stri
     bool verbose = false;
 #endif
 
-   /*
-// ###########################################################
-
-    String swfargs = read_text_file("/home/jin/Work/UPnP/MediaTomb/YouTube/swf_args_new2.txt");
-    
-    Ref<Matcher> m2 = param_t->matcher(swfargs);
-    
-    if (m2->next())
-    {
-        String hmm = m2->group(1);
-        if (string_ok(hmm))
-            log_debug("############### t: %s\n", hmm.c_str());
-        else 
-            log_debug("no match?\n");
-    }
-    throw _Exception(_("OVER"));
-*/
-
-// ###########################################################
-
-
     if (!string_ok(video_id))
         throw _Exception(_("No video ID specified!"));
 
@@ -119,87 +105,71 @@ String YouTubeVideoURL::getVideoURL(Stri
 
     Ref<URL> url(new URL(YOUTUBE_PAGESIZE));
 
-    Ref<StringBuffer> buffer = url->download(watch, &retcode, curl_handle,
-                                             false, verbose, true);
+    buffer = url->download(watch, &retcode, curl_handle, false, verbose, false);
     if (retcode != 200)
-    {
-        throw _Exception(_("Failed to get URL for video with id ")
-                         + watch + _("HTTP response code: ") + 
-                         String::from(retcode));
-    }
+        throw _Exception(_("Failed to get URL for video with id ") + watch + _("HTTP response code: ") + String::from(retcode));
 
-    log_debug("------> GOT BUFFER %s\n", buffer->toString().c_str());
+    //log_debug("------> REQUEST URL1: %s\n", watch.c_str());
+    //log_debug("------> GOT BUFFER1: %s\n", buffer->toString().c_str());
 
-    Ref<Matcher> matcher =  reVideoURLParams->matcher(buffer->toString());
-    String params;
+    matcher = EMBED->matcher(buffer->toString());
     if (matcher->next())
     {
-//        params = trim_string(matcher->group(1));
-        params = trim_string( matcher->group( 0 ) );
-      /*
-        int brace = params.index( '{' );
-        if ( brace > 0 )
-            params = params.substring( brace );
-        brace = params.index( '}' );
-        if ( brace > 0 )
-            params = params.substring( 0, brace + 1 );
-            */
-        Ref<Matcher> m2 = param_t->matcher(params);
-        if (m2->next())
-        {
-            String hmm = m2->group(1);
-            if (string_ok(hmm))
-                params = hmm; 
-            else 
-            {
-                throw _Exception(_("Could not retrieve \"t\" parameter."));
-            }
-        }
-    }
-    else
-    {
-        throw _Exception(_("Failed to get URL for video with id (step 1)") + video_id);
-    }
+        urls = url_unescape(trim_string(matcher->group(1)).c_str());
+        urls = url_unescape(urls);
+        //log_debug("------> GOT BUFFER EMBED: %s\n", urls.c_str());
 
-    params = _(YOUTUBE_URL_GET) + YOUTUBE_URL_PARAM_VIDEO_ID + '=' + 
-             video_id + '&' + YOUTUBE_URL_PARAM_T + '=' + params;
-
-    if (mp4)
-    {
-        String format = _("&fmt=18");
+        buffer->clear();
+        *buffer << urls;
         
-        if (hd)
+        matcher = FMT->matcher(buffer->toString());
+        if (matcher->next())
         {
-            matcher = HD->matcher(buffer->toString());
-            if (matcher->next())
-            {
-                if (trim_string(matcher->group(1)) == "true")
-                    format = _("&fmt=22");
-            }
+            urls = trim_string(matcher->group(1)).c_str();
+            //log_debug("------> GOT BUFFER FMT: %s\n", urls.c_str());
+            return whichURL(urls, mp4, hd);
         }
-                    
-        params = params + format;
-    }
-
-    buffer = url->download(params, &retcode, curl_handle, true, verbose, true);
-
-    matcher = redirectLocation->matcher(buffer->toString());
-    if (matcher->next())
-    {
-        if (string_ok(trim_string(matcher->group(1))))
-            return trim_string(matcher->group(1));
-        else
-            throw _Exception(_("Failed to get URL for video with id (step 2)")+ 
-                             video_id);
     }
+    throw _Exception(_("Could not retrieve YouTube video URL"));
+}
 
-    if (retcode != 303)
+String YouTubeVideoURL::whichURL(String tmpStr, bool mp4, bool hd)
+{
+    while( tmpStr.find("url=") >= 0 )
     {
-        throw _Exception(_("Unexpected reply from YouTube: ") + 
-                         String::from(retcode)+" for url "+params);
+		Ref<Matcher> matcher;
+		String fmturl;
+		int length;
+		
+		tmpStr = tmpStr.substring(tmpStr.find("url=") + 4);
+		length = tmpStr.find("url=");
+		
+		fmturl = (length==-1)? tmpStr : tmpStr.substring(0,length);
+		
+		//log_debug("------> GOT BUFFER witchURL:(len=%d) %s\n",length, fmturl.c_str() );
+
+	    matcher = FMTURL->matcher( fmturl );
+	    if( matcher->next() )
+	    {
+			int fmt = atoi( trim_string(matcher->group(2)).c_str() );
+			
+			fmturl = trim_string(matcher->group(1)).c_str();
+			
+			log_debug("------> GOT BUFFER witchURL: %d -- %s\n", fmt, fmturl.c_str() );
+			log_debug("------> PLAYMODE %s %s\n",hd?"SD":"HD",mp4?"flv":"mp4");
+			// mp4 22:HD H264+AAC
+			if(hd && fmt == 37) return fmturl;
+			if(hd && fmt == 45) return fmturl;
+			if(hd && fmt == 22) return fmturl;
+			// 
+			if((hd || mp4) && fmt == 18) return fmturl;
+			 // flv 34:H264+AAC low  35:H264+AAC hi
+			if(fmt == 5 || fmt == 44 || fmt == 34 || fmt == 35) return fmturl;
+		}
+		continue;
     }
 
-    throw _Exception(_("Could not retrieve YouTube video URL"));
+    throw _Exception(_("Could not retrieve YouTube video URL(wichURL)"));
 }
 
 #endif//YOUTUBE
diff -rup ../BUILD/mediatomb-0.12.1/src/youtube_video_url.h mediatomb-0.12.1/src/youtube_video_url.h
--- ../BUILD/mediatomb-0.12.1/src/youtube_video_url.h	2010-03-25 23:58:11.000000000 +0900
+++ mediatomb-0.12.1/src/youtube_video_url.h	2011-08-08 22:56:38.000000000 +0900
@@ -57,14 +57,16 @@ public:
     /// available
     /// \return the url to the .flv or .mp4 file 
     zmm::String getVideoURL(zmm::String video_id, bool mp4, bool hd);
+    zmm::String whichURL(zmm::String tmpStr, bool mp4, bool hd);
 
 protected:
     // the handle *must never be used from multiple threads*
     CURL *curl_handle;
     pthread_t pid;
-    zmm::Ref<RExp> reVideoURLParams;
-    zmm::Ref<RExp> redirectLocation;
-    zmm::Ref<RExp> param_t;
+
+    zmm::Ref<RExp> EMBED;
+    zmm::Ref<RExp> FMT;
+    zmm::Ref<RExp> FMTURL;
     zmm::Ref<RExp> HD;
 };
