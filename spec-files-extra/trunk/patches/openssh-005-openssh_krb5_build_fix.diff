#
# This is to work around an unresloved symbol problem with the Kerberos
# build option. Unlike MIT Kerberos, the gss_krb5_copy_ccache() function
# is not supported on Solaris, because it violates API abstraction. This
# workaround disables delegated credentials storing on server side.  
#
# The long term goal is to replace Solaris Kerberos libraries with MIT Kerberos
# delivered from Userland gate (The Solaris MIT Kerberos Drop in Project). 
# After that, function gss_krb5_copy_ccache() will be available in Solaris and
# the delegating credentials functionality will be made available using the
# upstream code.
#
diff -ur old/configure new/configure
--- orig/configure	Thu Mar 13 03:19:03 2014
+++ new/configure	Sun May  4 21:08:24 2014
@@ -16619,6 +16619,12 @@
 		if test -x $KRB5CONF ; then
 			K5CFLAGS="`$KRB5CONF --cflags`"
 			K5LIBS="`$KRB5CONF --libs`"
+
+			# Oracle Solaris
+ 			# OpenSSH is mixed-up gssapi AND krb5 aplication
+ 			K5CFLAGS="$K5CFLAGS `$KRB5CONF --cflags krb5`"
+ 			K5LIBS="$K5LIBS `$KRB5CONF --libs krb5`"
+
 			CPPFLAGS="$CPPFLAGS $K5CFLAGS"
 
 			{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for gssapi support" >&5
diff -ru old/ssh-gss.h new/ssh-gss.h
--- orig/ssh-gss.h	Thu Feb 27 00:17:50 2014
+++ new/ssh-gss.h	Sun May  4 21:12:23 2014
@@ -45,7 +45,13 @@
 /* Old MIT Kerberos doesn't seem to define GSS_NT_HOSTBASED_SERVICE */
 
 #  if !HAVE_DECL_GSS_C_NT_HOSTBASED_SERVICE
+/* 
+ * on Solaris in gssapi.h there is: 
+ *     extern const gss_OID GSS_C_NT_HOSTBASED_SERVICE; 
+ */
+#   ifndef KRB5_BUILD_FIX
 #   define GSS_C_NT_HOSTBASED_SERVICE gss_nt_service_name
+#   endif /* KRB5_BUILD_FIX */
 #  endif /* !HAVE_DECL_GSS_C_NT_... */
 
 # endif /* !HEIMDAL */
--- old/gss-serv-krb5.c	2006-08-31 22:38:36.000000000 -0700
+++ new/gss-serv-krb5.c	2012-10-25 03:09:36.080638790 -0700
@@ -126,6 +126,12 @@
 		return;
 	}
 
+#ifdef KRB5_BUILD_FIX
+	/* currently unimplemented - print an error, but continue */
+	error("Delegated credentials storing not implemented.");
+	return;
+#else
+
 	if (ssh_gssapi_krb5_init() == 0)
 		return;
 
@@ -182,6 +188,7 @@
 	krb5_cc_close(krb_context, ccache);
 
 	return;
+#endif /* KRB5_BUILD_FIX */
 }
 
 ssh_gssapi_mech gssapi_kerberos_mech = {
--- orig/sshd.c	Sun May  4 21:17:07 2014
+++ new/sshd.c	Sun May  4 21:19:51 2014
@@ -263,6 +263,11 @@
 /* Unprivileged user */
 struct passwd *privsep_pw = NULL;
 
+#if defined(KRB5_BUILD_FIX) && defined(GSSAPI)
+/* Temporary storing supported GSS mechs */
+gss_OID_set g_supported;
+#endif
+
 /* Prototypes for various functions defined later in this file. */
 void destroy_sensitive_data(void);
 void demote_sensitive_data(void);
@@ -1416,6 +1421,9 @@
 	compat_init_setproctitle(ac, av);
 	av = saved_argv;
 #endif
+#if defined(KRB5_BUILD_FIX) && defined(GSSAPI)
+	OM_uint32 ms;
+#endif
 
 	if (geteuid() == 0 && setgroups(0, NULL) == -1)
 		debug("setgroups(): %.200s", strerror(errno));
@@ -2094,6 +2102,11 @@
 	buffer_init(&loginmsg);
 	auth_debug_reset();
 
+#if defined(KRB5_BUILD_FIX) && defined(GSSAPI)
+	/* collect gss mechs for later use in privsep child */
+	ssh_gssapi_supported_oids(&g_supported);
+#endif
+
 	if (use_privsep) {
 		if (privsep_preauth(authctxt) == 1)
 			goto authenticated;
@@ -2130,6 +2143,9 @@
 		close(startup_pipe);
 		startup_pipe = -1;
 	}
+#if defined(KRB5_BUILD_FIX) && defined(GSSAPI)
+	gss_release_oid_set(&ms, &g_supported);
+#endif 
 
 #ifdef SSH_AUDIT_EVENTS
 	audit_event(SSH_AUTH_SUCCESS);
